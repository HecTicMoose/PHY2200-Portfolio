{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plinko Board Simulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Research question: How does the radius of the ball dropped for a plinko board effect how many times it hits the bottom wall and where?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Equations Used:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Momentum equation: $ P = m*v $, where $m$ is the mass of the object and $v$ is the velocity.\n",
    "- Position update equation: $ r_f = r_i + v*\\Delta t $ where $r_f$ and $r_i$ are the final and inital position respectively.\n",
    "- Time update equation: $t_f = t_i + \\Delta t $"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objective:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a simulation of a non-traditional plinko board and create a histogram that will plot where the ball lands in the x-position."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assumptions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Closed system.\n",
    "- Energy/force is conserved.\n",
    "- Non-traditional plinko board(ball will hit bottom wall and bounce back up instead of falling through).\n",
    "- Ball will be dropped at a random location within a set range."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"glowscript\" class=\"glowscript\"></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") { window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")};}else{ element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from vpython import *\n",
    "import numpy as np\n",
    "import random as rand\n",
    "import matplotlib.pyplot as plt\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_collisions():\n",
    "    \"\"\"Determine all pairs of colliding spheres in the global particles[] list. \n",
    "        \n",
    "    \"\"\"\n",
    "    global rods\n",
    "    \n",
    "    crods = None #a list of rods to store and check collisions with ball\n",
    "    \n",
    "\n",
    "    for j in range(0,len(rods)): \n",
    "        d = mag(balls.pos - rods[j].pos)\n",
    "        if d < Rball+Rrod:\n",
    "            crods = rods[j]            \n",
    "            print(\"collision\")\n",
    "    return crods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ball_pos_y():\n",
    "    \"\"\"function to store for histogram\n",
    "    \"\"\"\n",
    "    bally = []\n",
    "    if ball.pos.y < -.5:\n",
    "        bally.append([i])\n",
    "        print(bally.append)\n",
    "           \n",
    "    return ball.pos.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"glowscript\" class=\"glowscript\"></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") { window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")};}else{ element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting position on axis: 0.04710756219976891\n"
     ]
    }
   ],
   "source": [
    "scene = canvas(title=\"Plinko Board\")\n",
    "\n",
    "#constants\n",
    "m = 2000 #mass of ball in kg\n",
    "Rrod = 0.005\n",
    "Rball = 2*Rrod #radius of ball in m\n",
    "L = 2 #length of box in m\n",
    "thick = L/100 #thickness of box wall in m\n",
    "g = -9.8 #gravity\n",
    "Fnet = vec(0,g*m,0)#net force\n",
    "ballx=[]\n",
    "#visual\n",
    "Lwall = box(pos = vec(-L/2, 0, 0), size = vec(thick, L, L), color=color.white)\n",
    "Rwall = box(pos = vec(L/2, 0, 0), size = vec(thick, L, L), color=color.white)\n",
    "Bwall = box(pos = vec(0, -0.5, 0), size = vec(L, thick, L), color=color.white)\n",
    "\n",
    "#time and timsteps\n",
    "t = 0\n",
    "dt = 0.01\n",
    "\n",
    "scene.pause()\n",
    "#ball constants\n",
    "ball = sphere(pos = vec(random.uniform(0.01,0.09),1,0), radius = Rball, color = color.cyan, make_trail=True, retain=20, trail_radius=0.3*Rball)    \n",
    "ball.v = vec(0,0,0)\n",
    "ball.p = ball.v*m\n",
    "print(\"starting position on axis:\",ball.pos.x) # inital position of where ball starts on x axis since it is dropped between a range of 0.01-0.09\n",
    "#rod loop\n",
    "h = 5*Rrod\n",
    "\n",
    "# L = 2\n",
    "Ncols = 40\n",
    "dx = L/Ncols\n",
    "Nrows = 20\n",
    "dy = dx\n",
    "\n",
    "rods = []\n",
    "\n",
    "y = Nrows/2*dy\n",
    "for i in range(Nrows):\n",
    "    x = -L/2\n",
    "    if i % 2 == 0:\n",
    "        x = x + dx/2\n",
    "    for j in range(Ncols):\n",
    "        rod = cylinder(pos=vec(x,y,0), axis=h*vec(0,0,1), radius = Rrod, color=color.yellow)\n",
    "        rods.append(rod)\n",
    "        x = x + dx\n",
    "    y = y - dy\n",
    "#print(y)\n",
    "\n",
    "#number of time steps for the loop\n",
    "while t < 15:\n",
    "    rate(100) #sets number of loops per second in order to slow down or speed up visualization\n",
    "    ball.p = ball.p + (Fnet*dt)\n",
    "    ball.v = ball.p/m\n",
    "    ball.pos = ball.pos + ball.v*dt\n",
    "    \n",
    "  \n",
    " #collisions\n",
    "    #collisions with rod \n",
    "    for j in range(0,len(rods)): \n",
    "        d = mag(ball.pos - rods[j].pos)\n",
    "        if d < Rball+Rrod:\n",
    "            r = (ball.pos - rods[j].pos)\n",
    "            ball.pos = ball.pos - ball.v*dt\n",
    "            rhat = hat(r)\n",
    "            vballrad = dot(ball.v,rhat)*rhat\n",
    "            vballtan = ball.v - vballrad\n",
    "            vballrad = -vballrad\n",
    "            ball.v = vballtan + vballrad\n",
    "            ball.p = ball.v * m\n",
    "            ball.pos = ball.pos + ball.v*dt\n",
    "            #print(\"colo\")\n",
    "    #collisions with walls\n",
    "    if ball.pos.x > L/2:\n",
    "        ball.v.x = - abs(ball.v.x)\n",
    "        ball.p = m*ball.v\n",
    "    elif ball.pos.x < -L/2:\n",
    "        ball.v.x = abs(ball.v.x)\n",
    "        ball.p = m*ball.v\n",
    "    if ball.pos.y<-.5:\n",
    "        ball.v.y = abs(ball.v.y)\n",
    "        ball.p = m*ball.v\n",
    "        ballx.append([ball.pos.x])#store positions in list\n",
    "        #print(ball.pos.x)#validation \n",
    "\n",
    "    t = t + dt#update time in loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "positions that ball hit in the bottom of wall(x position): [[0.6084513119270979], [0.034018025425811386], [-0.981862243953864]]\n"
     ]
    }
   ],
   "source": [
    "print(\"positions that ball hit in the bottom of wall(x position):\",ballx)#validate its stored in list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histogram stuff\n",
    "deltav = .3 # bin width for v histogram\n",
    "nbins = 10 #number of bins\n",
    "bin_edges = [int(i*deltav) for i in range(nbins)] #left side of bins\n",
    "\n",
    "#store histogram\n",
    "counts, binx = np.histogram([ballx], bins=bin_edges, range=None, normed=None, weights=None, density=None)\n",
    "#create histogram\n",
    "#calculate average position of each bin\n",
    "centers = [] #store position\n",
    "for i in range(len(binx)-1):\n",
    "    vmiddle = (binx[i] + binx[i+1])/len(binx) #calculate average position\n",
    "    centers.append(vmiddle)\n",
    "\n",
    "#plot bar graph (histogram)\n",
    "plt.figure(figsize=(10,5))\n",
    "plt.bar(centers, counts, align='center', width=deltav)\n",
    "plt.title('Histogram of X-positions when ball hits bottom wall')\n",
    "plt.xlabel('Position where ball hits(x-axis,average)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the histogram above, it is clearly shown that the ball hits in between the given X-coordinates as it is an average of the entire list of x-positions of contact."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"glowscript\" class=\"glowscript\"></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") { window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")};}else{ element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting position of ball at x-axis: 0.0455947984090806\n"
     ]
    }
   ],
   "source": [
    "#making radius of ball same as radius of rods to see how it changes data \n",
    "scene = canvas(title=\"Plinko Board 2\")\n",
    "\n",
    "#constants\n",
    "m = 2000 #mass of ball in kg\n",
    "Rrod = 0.005\n",
    "Rball = Rrod #radius of ball in m \n",
    "L = 2 #length of box in m\n",
    "thick = L/100 #thickness of box wall in m\n",
    "g = -9.8 #gravity\n",
    "Fnet = vec(0,g*m,0)#net force\n",
    "ballx2=[]\n",
    "#visual\n",
    "Lwall = box(pos = vec(-L/2, 0, 0), size = vec(thick, L, L), color=color.white)\n",
    "Rwall = box(pos = vec(L/2, 0, 0), size = vec(thick, L, L), color=color.white)\n",
    "Bwall = box(pos = vec(0, -0.5, 0), size = vec(L, thick, L), color=color.white)\n",
    "\n",
    "#time and timsteps\n",
    "t = 0\n",
    "dt = 0.01\n",
    "\n",
    "scene.pause()\n",
    "#ball constants\n",
    "ball = sphere(pos = vec(random.uniform(0.01,0.09),1,0), radius = Rball, color = color.cyan, make_trail=True, retain=20, trail_radius=0.3*Rball)    \n",
    "ball.v = vec(0,0,0)\n",
    "ball.p = ball.v*m\n",
    "print(\"starting position of ball at x-axis:\", ball.pos.x)\n",
    "#rod loop\n",
    "h = 5*Rrod\n",
    "\n",
    "# L = 2\n",
    "Ncols = 40\n",
    "dx = L/Ncols\n",
    "Nrows = 20\n",
    "dy = dx\n",
    "\n",
    "rods = []\n",
    "\n",
    "y = Nrows/2*dy\n",
    "for i in range(Nrows):\n",
    "    x = -L/2\n",
    "    if i % 2 == 0:\n",
    "        x = x + dx/2\n",
    "    for j in range(Ncols):\n",
    "        rod = cylinder(pos=vec(x,y,0), axis=h*vec(0,0,1), radius = Rrod, color=color.yellow)\n",
    "        rods.append(rod)\n",
    "        x = x + dx\n",
    "    y = y - dy\n",
    "#print(y)\n",
    "\n",
    "#number of time steps for the loop\n",
    "while t < 15:\n",
    "    rate(100) #sets number of loops per second in order to slow down or speed up visualization\n",
    "    ball.p = ball.p + (Fnet*dt)\n",
    "    ball.v = ball.p/m\n",
    "    ball.pos = ball.pos + ball.v*dt\n",
    "    \n",
    "  \n",
    " #collisions\n",
    "    #collisions with rod \n",
    "    for j in range(0,len(rods)): \n",
    "        d = mag(ball.pos - rods[j].pos)\n",
    "        if d < Rball+Rrod:\n",
    "            r = (ball.pos - rods[j].pos)\n",
    "            ball.pos = ball.pos - ball.v*dt\n",
    "            rhat = hat(r)\n",
    "            vballrad = dot(ball.v,rhat)*rhat\n",
    "            vballtan = ball.v - vballrad\n",
    "            vballrad = -vballrad\n",
    "            ball.v = vballtan + vballrad\n",
    "            ball.p = ball.v * m\n",
    "            ball.pos = ball.pos + ball.v*dt\n",
    "            #print(\"colo\")\n",
    "    #collisions with walls\n",
    "    if ball.pos.x > L/2:\n",
    "        ball.v.x = - abs(ball.v.x)\n",
    "        ball.p = m*ball.v\n",
    "    elif ball.pos.x < -L/2:\n",
    "        ball.v.x = abs(ball.v.x)\n",
    "        ball.p = m*ball.v\n",
    "    if ball.pos.y<-.5:\n",
    "        ball.v.y = abs(ball.v.y)\n",
    "        ball.p = m*ball.v\n",
    "        ballx2.append([ball.pos.x])#store positions in list\n",
    "        #print(ball.pos.x)#validation \n",
    "\n",
    "    t = t + dt#update time in loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above code is changing the radius to equal the radius of the rods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.5997912681919455], [0.6705305961815142], [0.10691247341659356]]\n"
     ]
    }
   ],
   "source": [
    "print(ballx2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histogram stuff\n",
    "deltav = .3 # bin width for v histogram\n",
    "nbins = 10 #number of bins\n",
    "bin_edges = [int(i*deltav) for i in range(nbins)] #left side of bins\n",
    "\n",
    "#store histogram\n",
    "(counts, binx2) = np.histogram([ballx2], bins=bin_edges, range=None, normed=None, weights=None, density=None)\n",
    "\n",
    "#create histogram\n",
    "#calculate average position of each bin\n",
    "centers = [] #store position\n",
    "for i in range(len(binx2)-1):\n",
    "    vmiddle = (binx2[i] + binx2[i+1])/len(binx2) #calculate average position\n",
    "    centers.append(vmiddle)\n",
    "\n",
    "#plot bar graph (histogram)\n",
    "plt.figure(figsize=(12,8))\n",
    "plt.bar(centers, counts , align='center', width=deltav)\n",
    "plt.title('Histogram of X-positions when ball hits bottom wall')\n",
    "plt.xlabel('Position where ball hits(x-coord, average)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Making the ball the same size radius as the rods completly changes the amount of times it hits the bottom wall and also where it hits. The trajectory of the ball is much more sporadic and unpredictable. The reason for such a small loop is because the program will actually break if ran for too long of a time and the ball will fall under the wall and bounce back and fourth between the right and left wall. I beleive this could be a python error as it is overloading the loop so the boundries of the loop will fall out of place."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
